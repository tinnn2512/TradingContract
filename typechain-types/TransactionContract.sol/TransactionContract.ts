/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";
import { State } from "../LandLicenseRegistry";

export interface TransactionContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptTransaction"
      | "buyerCancelTransaction"
      | "cancelTransaction"
      | "confirmTransaction"
      | "createTransaction"
      | "getTransaction"
      | "id"
      | "idToState"
      | "idToTransaction"
      | "payment"
      | "sellerCancelTransaction"
      | "setLandLicenseRegistryContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DepositSigned"
      | "Payment"
      | "TransactionCanceled"
      | "TransactionCreated"
      | "TransactionSuccess"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyerCancelTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransaction",
    values: [AddressLike[], string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "idToState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellerCancelTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLandLicenseRegistryContract",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyerCancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idToState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idToTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellerCancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLandLicenseRegistryContract",
    data: BytesLike
  ): Result;
}

export namespace DepositSignedEvent {
  export type InputTuple = [idTransaction: BigNumberish];
  export type OutputTuple = [idTransaction: bigint];
  export interface OutputObject {
    idTransaction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentEvent {
  export type InputTuple = [idTransaction: BigNumberish];
  export type OutputTuple = [idTransaction: bigint];
  export interface OutputObject {
    idTransaction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionCanceledEvent {
  export type InputTuple = [idTransaction: BigNumberish, state: BigNumberish];
  export type OutputTuple = [idTransaction: bigint, state: bigint];
  export interface OutputObject {
    idTransaction: bigint;
    state: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionCreatedEvent {
  export type InputTuple = [
    buyers: AddressLike[],
    sellers: AddressLike[],
    idTransaction: BigNumberish,
    licenseId: string,
    depositPrice: BigNumberish,
    transferPrice: BigNumberish,
    timeStart: BigNumberish,
    timeEnd: BigNumberish
  ];
  export type OutputTuple = [
    buyers: string[],
    sellers: string[],
    idTransaction: bigint,
    licenseId: string,
    depositPrice: bigint,
    transferPrice: bigint,
    timeStart: bigint,
    timeEnd: bigint
  ];
  export interface OutputObject {
    buyers: string[];
    sellers: string[];
    idTransaction: bigint;
    licenseId: string;
    depositPrice: bigint;
    transferPrice: bigint;
    timeStart: bigint;
    timeEnd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionSuccessEvent {
  export type InputTuple = [idTransaction: BigNumberish];
  export type OutputTuple = [idTransaction: bigint];
  export interface OutputObject {
    idTransaction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TransactionContract extends BaseContract {
  getStateOfTransaction(arg0: number): unknown;
  initiateOwnerApproval(arg0: number): unknown;
  setState(arg0: number, PENDDING: State): unknown;
  getState(transactionId: number): unknown;
  buyers: any;
  depositPrice: any;
  transferPrice: any;
  connect(runner?: ContractRunner | null): TransactionContract;
  waitForDeployment(): Promise<this>;

  interface: TransactionContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptTransaction: TypedContractMethod<
    [_idTransaction: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyerCancelTransaction: TypedContractMethod<
    [_idTransaction: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelTransaction: TypedContractMethod<
    [_idTransaction: BigNumberish],
    [void],
    "payable"
  >;

  confirmTransaction: TypedContractMethod<
    [_idTransaction: BigNumberish],
    [void],
    "payable"
  >;

  createTransaction: TypedContractMethod<
    [
      _buyers: AddressLike[],
      _licenseId: string,
      _depositPrice: BigNumberish,
      _transferPrice: BigNumberish,
      _depositTime: BigNumberish
    ],
    [void],
    "payable"
  >;

  getTransaction: TypedContractMethod<
    [_idTransaction: BigNumberish],
    [[string[], string[], string, bigint, bigint, bigint, bigint]],
    "view"
  >;

  id: TypedContractMethod<[], [bigint], "view">;

  idToState: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  idToTransaction: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        licenseId: string;
        depositPrice: bigint;
        transferPrice: bigint;
        timeStart: bigint;
        timeEnd: bigint;
      }
    ],
    "view"
  >;

  payment: TypedContractMethod<
    [_idTransaction: BigNumberish],
    [void],
    "payable"
  >;

  sellerCancelTransaction: TypedContractMethod<
    [_idTransaction: BigNumberish],
    [void],
    "payable"
  >;

  setLandLicenseRegistryContract: TypedContractMethod<
    [_LandLicenseRegistryContractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptTransaction"
  ): TypedContractMethod<[_idTransaction: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyerCancelTransaction"
  ): TypedContractMethod<[_idTransaction: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelTransaction"
  ): TypedContractMethod<[_idTransaction: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "confirmTransaction"
  ): TypedContractMethod<[_idTransaction: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createTransaction"
  ): TypedContractMethod<
    [
      _buyers: AddressLike[],
      _licenseId: string,
      _depositPrice: BigNumberish,
      _transferPrice: BigNumberish,
      _depositTime: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getTransaction"
  ): TypedContractMethod<
    [_idTransaction: BigNumberish],
    [[string[], string[], string, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(nameOrSignature: "id"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "idToState"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "idToTransaction"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        licenseId: string;
        depositPrice: bigint;
        transferPrice: bigint;
        timeStart: bigint;
        timeEnd: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "payment"
  ): TypedContractMethod<[_idTransaction: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "sellerCancelTransaction"
  ): TypedContractMethod<[_idTransaction: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "setLandLicenseRegistryContract"
  ): TypedContractMethod<
    [_LandLicenseRegistryContractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DepositSigned"
  ): TypedContractEvent<
    DepositSignedEvent.InputTuple,
    DepositSignedEvent.OutputTuple,
    DepositSignedEvent.OutputObject
  >;
  getEvent(
    key: "Payment"
  ): TypedContractEvent<
    PaymentEvent.InputTuple,
    PaymentEvent.OutputTuple,
    PaymentEvent.OutputObject
  >;
  getEvent(
    key: "TransactionCanceled"
  ): TypedContractEvent<
    TransactionCanceledEvent.InputTuple,
    TransactionCanceledEvent.OutputTuple,
    TransactionCanceledEvent.OutputObject
  >;
  getEvent(
    key: "TransactionCreated"
  ): TypedContractEvent<
    TransactionCreatedEvent.InputTuple,
    TransactionCreatedEvent.OutputTuple,
    TransactionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionSuccess"
  ): TypedContractEvent<
    TransactionSuccessEvent.InputTuple,
    TransactionSuccessEvent.OutputTuple,
    TransactionSuccessEvent.OutputObject
  >;

  filters: {
    "DepositSigned(uint256)": TypedContractEvent<
      DepositSignedEvent.InputTuple,
      DepositSignedEvent.OutputTuple,
      DepositSignedEvent.OutputObject
    >;
    DepositSigned: TypedContractEvent<
      DepositSignedEvent.InputTuple,
      DepositSignedEvent.OutputTuple,
      DepositSignedEvent.OutputObject
    >;

    "Payment(uint256)": TypedContractEvent<
      PaymentEvent.InputTuple,
      PaymentEvent.OutputTuple,
      PaymentEvent.OutputObject
    >;
    Payment: TypedContractEvent<
      PaymentEvent.InputTuple,
      PaymentEvent.OutputTuple,
      PaymentEvent.OutputObject
    >;

    "TransactionCanceled(uint256,uint8)": TypedContractEvent<
      TransactionCanceledEvent.InputTuple,
      TransactionCanceledEvent.OutputTuple,
      TransactionCanceledEvent.OutputObject
    >;
    TransactionCanceled: TypedContractEvent<
      TransactionCanceledEvent.InputTuple,
      TransactionCanceledEvent.OutputTuple,
      TransactionCanceledEvent.OutputObject
    >;

    "TransactionCreated(address[],address[],uint256,string,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TransactionCreatedEvent.InputTuple,
      TransactionCreatedEvent.OutputTuple,
      TransactionCreatedEvent.OutputObject
    >;
    TransactionCreated: TypedContractEvent<
      TransactionCreatedEvent.InputTuple,
      TransactionCreatedEvent.OutputTuple,
      TransactionCreatedEvent.OutputObject
    >;

    "TransactionSuccess(uint256)": TypedContractEvent<
      TransactionSuccessEvent.InputTuple,
      TransactionSuccessEvent.OutputTuple,
      TransactionSuccessEvent.OutputObject
    >;
    TransactionSuccess: TypedContractEvent<
      TransactionSuccessEvent.InputTuple,
      TransactionSuccessEvent.OutputTuple,
      TransactionSuccessEvent.OutputObject
    >;
  };
}
